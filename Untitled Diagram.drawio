<mxfile host="app.diagrams.net" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36" version="26.1.1" pages="5">
  <diagram name="architecture" id="rJjxH9l3r4iKEUrz9h0S">
    <mxGraphModel dx="1900" dy="583" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="850" pageHeight="1100" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="UAcA6Q91Pi1CXa0FNyhf-1" value="What is Architecture ? : design / workflow ==&amp;gt; where to start and end the stuff." style="rounded=1;whiteSpace=wrap;html=1;fillColor=#dae8fc;strokeColor=#6c8ebf;" vertex="1" parent="1">
          <mxGeometry x="70" y="220" width="250" height="40" as="geometry" />
        </mxCell>
        <mxCell id="UAcA6Q91Pi1CXa0FNyhf-2" value="Framework ?&amp;nbsp; implementation of architecture&amp;nbsp;" style="rounded=1;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="70" y="350" width="300" height="60" as="geometry" />
        </mxCell>
        <mxCell id="UAcA6Q91Pi1CXa0FNyhf-5" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="1" source="UAcA6Q91Pi1CXa0FNyhf-3" target="UAcA6Q91Pi1CXa0FNyhf-4">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="UAcA6Q91Pi1CXa0FNyhf-3" value="What is RabbitMQ?&amp;nbsp;&lt;div&gt;RabbitMQ architecture ?&amp;nbsp;&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;fillColor=#dae8fc;strokeColor=#6c8ebf;" vertex="1" parent="1">
          <mxGeometry x="70" y="470" width="230" height="60" as="geometry" />
        </mxCell>
        <mxCell id="UAcA6Q91Pi1CXa0FNyhf-7" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="1" source="UAcA6Q91Pi1CXa0FNyhf-4" target="UAcA6Q91Pi1CXa0FNyhf-6">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="UAcA6Q91Pi1CXa0FNyhf-4" value="RabbitMQ : its an open source message broker software. / message oriented middleware" style="whiteSpace=wrap;html=1;fillColor=#dae8fc;strokeColor=#6c8ebf;rounded=1;" vertex="1" parent="1">
          <mxGeometry x="435" y="470" width="235" height="60" as="geometry" />
        </mxCell>
        <mxCell id="UAcA6Q91Pi1CXa0FNyhf-6" value="A message in the context of message broker like (rabbitMQ, kafka, ActiveMQ) is a discrete unit of data or info exchanged between applications or components in a distributed system." style="whiteSpace=wrap;html=1;fillColor=#dae8fc;strokeColor=#6c8ebf;rounded=1;" vertex="1" parent="1">
          <mxGeometry x="364.38" y="600" width="376.25" height="60" as="geometry" />
        </mxCell>
        <mxCell id="UAcA6Q91Pi1CXa0FNyhf-8" value="Messaging Queue : a messaging queue is a communication protocol that allows you to perform complete asynchronous exchange between the applications, systems , services." style="rounded=1;whiteSpace=wrap;html=1;fillColor=#f8cecc;strokeColor=#b85450;fontStyle=1" vertex="1" parent="1">
          <mxGeometry x="-60" y="600" width="340" height="60" as="geometry" />
        </mxCell>
        <mxCell id="UAcA6Q91Pi1CXa0FNyhf-9" value="Architecture :&amp;nbsp;&lt;div&gt;1. Producer : the application component that sends (publishes) messages to RabbitMQ.&lt;/div&gt;&lt;div&gt;2. consumer : the application component that receives and processes messages from RabbitMQ&lt;/div&gt;&lt;div&gt;3. Broker : RabbitMQ itself acts as a message broker , responsible for accepting, routing and storing the messages.&lt;/div&gt;&lt;div&gt;4. Queues and exchange&amp;nbsp; :&amp;nbsp;&lt;/div&gt;&lt;div&gt;Queue : a buffer that holds messages until they are processed by consumers.&lt;/div&gt;&lt;div&gt;exchange:&amp;nbsp; routes messages from the producers to queue using specific route.&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="-70" y="750" width="480" height="260" as="geometry" />
        </mxCell>
        <mxCell id="UAcA6Q91Pi1CXa0FNyhf-10" value="" style="rounded=1;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry y="1080" width="120" height="60" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
  <diagram id="j8_JaOQrRzmPMZEEwhw3" name="Page-2">
    <mxGraphModel dx="1050" dy="583" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="850" pageHeight="1100" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="tVuj1gzufYO9Nx3ZrR6p-1" value="to form the cluster 1st we have to stop the services (slave and slave2)&lt;div&gt;to fire reset command.==&amp;gt; reset your RabbitMQ instance.&lt;/div&gt;&lt;div&gt;all slaves under the cluster via join_cluster command&lt;/div&gt;&lt;div&gt;then we will up our slaves&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="20" y="20" width="580" height="110" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
  <diagram id="6fM7a9fNGL8s7gdc5sU-" name="Page-3">
    <mxGraphModel dx="1050" dy="583" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="850" pageHeight="1100" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="iVAzikupkRQtMa-XKPxc-3" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="1" source="iVAzikupkRQtMa-XKPxc-1" target="iVAzikupkRQtMa-XKPxc-2">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="iVAzikupkRQtMa-XKPxc-5" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="1" source="iVAzikupkRQtMa-XKPxc-1" target="iVAzikupkRQtMa-XKPxc-4">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="iVAzikupkRQtMa-XKPxc-1" value="master" style="rounded=1;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="340" y="170" width="120" height="60" as="geometry" />
        </mxCell>
        <mxCell id="iVAzikupkRQtMa-XKPxc-2" value="slave" style="whiteSpace=wrap;html=1;rounded=1;" vertex="1" parent="1">
          <mxGeometry x="150" y="310" width="120" height="60" as="geometry" />
        </mxCell>
        <mxCell id="iVAzikupkRQtMa-XKPxc-4" value="slave2" style="whiteSpace=wrap;html=1;rounded=1;" vertex="1" parent="1">
          <mxGeometry x="530" y="310" width="120" height="60" as="geometry" />
        </mxCell>
        <mxCell id="iVAzikupkRQtMa-XKPxc-6" value="when we want to perform the any operations in our Rabbitmq env.&lt;div&gt;&amp;nbsp;1.we have to set the policies.&lt;/div&gt;&lt;div&gt;2. can we go &amp;amp; create the queues ?&amp;nbsp;&lt;br&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="150" y="430" width="470" height="210" as="geometry" />
        </mxCell>
        <mxCell id="iVAzikupkRQtMa-XKPxc-7" value="queue :&amp;nbsp; its a buffer that stores messages until they are consumed.&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;DS : FIFO : messaging purpose.&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="30" y="720" width="470" height="110" as="geometry" />
        </mxCell>
        <mxCell id="iVAzikupkRQtMa-XKPxc-10" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="1" source="iVAzikupkRQtMa-XKPxc-8" target="iVAzikupkRQtMa-XKPxc-9">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="iVAzikupkRQtMa-XKPxc-8" value="AMQ ==&amp;gt; RabbitMQ ===&amp;gt; queue ==&amp;gt; any type of queue for the same." style="rounded=1;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="60" y="920" width="470" height="60" as="geometry" />
        </mxCell>
        <mxCell id="iVAzikupkRQtMa-XKPxc-12" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="1" source="iVAzikupkRQtMa-XKPxc-9" target="iVAzikupkRQtMa-XKPxc-11">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="iVAzikupkRQtMa-XKPxc-9" value="1. classic(we should not use it)&lt;div&gt;2. quorum(preferred one )&amp;nbsp;&lt;/div&gt;&lt;div&gt;3. stream(3.9)&lt;/div&gt;" style="whiteSpace=wrap;html=1;rounded=1;" vertex="1" parent="1">
          <mxGeometry x="97.5" y="1070" width="395" height="60" as="geometry" />
        </mxCell>
        <mxCell id="iVAzikupkRQtMa-XKPxc-11" value="classic : (default queue)&lt;br&gt;1. classic queues are the default queues&amp;nbsp;&lt;div&gt;2. they store the info in memory (transient) or on the Disk(if we marked as durable)&lt;/div&gt;&lt;div&gt;3. its going to follow FIFO --&amp;gt; messages are delivered&amp;nbsp;&lt;/div&gt;&lt;div&gt;4. performance degrades under heavy load because of Disk I/O&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;h3 data-end=&quot;255&quot; data-start=&quot;197&quot;&gt;&lt;strong data-end=&quot;255&quot; data-start=&quot;203&quot;&gt;Causes of Disk I/O Bottlenecks in Classic Queues&lt;/strong&gt;&lt;/h3&gt;&lt;br/&gt;&lt;ol data-end=&quot;1726&quot; data-start=&quot;256&quot;&gt;&lt;br/&gt;&lt;li data-end=&quot;493&quot; data-start=&quot;256&quot;&gt;&lt;br/&gt;&lt;p data-end=&quot;288&quot; data-start=&quot;259&quot;&gt;&lt;strong data-end=&quot;286&quot; data-start=&quot;259&quot;&gt;Persistence of Messages&lt;/strong&gt;&lt;/p&gt;&lt;br/&gt;&lt;ul data-end=&quot;493&quot; data-start=&quot;292&quot;&gt;&lt;br/&gt;&lt;li data-end=&quot;391&quot; data-start=&quot;292&quot;&gt;Classic queues often persist messages to disk to guarantee durability and prevent message loss.&lt;/li&gt;&lt;br/&gt;&lt;li data-end=&quot;493&quot; data-start=&quot;395&quot;&gt;High message rates or large message sizes increase disk I/O, leading to slow reads and writes.&lt;/li&gt;&lt;br/&gt;&lt;/ul&gt;&lt;br/&gt;&lt;/li&gt;&lt;br/&gt;&lt;li data-end=&quot;691&quot; data-start=&quot;495&quot;&gt;&lt;br/&gt;&lt;p data-end=&quot;524&quot; data-start=&quot;498&quot;&gt;&lt;strong data-end=&quot;522&quot; data-start=&quot;498&quot;&gt;Slow Disk Throughput&lt;/strong&gt;&lt;/p&gt;&lt;br/&gt;&lt;ul data-end=&quot;691&quot; data-start=&quot;528&quot;&gt;&lt;br/&gt;&lt;li data-end=&quot;691&quot; data-start=&quot;528&quot;&gt;If the underlying storage (e.g., HDD or slow SSD) cannot keep up with the queue&#39;s write/read demands, messages get backlogged, causing performance degradation.&lt;/li&gt;&lt;br/&gt;&lt;/ul&gt;&lt;br/&gt;&lt;/li&gt;&lt;br/&gt;&lt;li data-end=&quot;942&quot; data-start=&quot;693&quot;&gt;&lt;br/&gt;&lt;p data-end=&quot;750&quot; data-start=&quot;696&quot;&gt;&lt;strong data-end=&quot;748&quot; data-start=&quot;696&quot;&gt;High Volume of Acknowledgments and Confirmations&lt;/strong&gt;&lt;/p&gt;&lt;br/&gt;&lt;ul data-end=&quot;942&quot; data-start=&quot;754&quot;&gt;&lt;br/&gt;&lt;li data-end=&quot;865&quot; data-start=&quot;754&quot;&gt;For every message written or read, the queue must log the operation to disk for consistency and durability.&lt;/li&gt;&lt;br/&gt;&lt;li data-end=&quot;942&quot; data-start=&quot;869&quot;&gt;Frequent fsync (force write to disk) operations slow down the system.&lt;/li&gt;&lt;br/&gt;&lt;/ul&gt;&lt;br/&gt;&lt;/li&gt;&lt;br/&gt;&lt;li data-end=&quot;1185&quot; data-start=&quot;944&quot;&gt;&lt;br/&gt;&lt;p data-end=&quot;982&quot; data-start=&quot;947&quot;&gt;&lt;strong data-end=&quot;980&quot; data-start=&quot;947&quot;&gt;Message Batching and Ordering&lt;/strong&gt;&lt;/p&gt;&lt;br/&gt;&lt;ul data-end=&quot;1185&quot; data-start=&quot;986&quot;&gt;&lt;br/&gt;&lt;li data-end=&quot;1112&quot; data-start=&quot;986&quot;&gt;Some queues require strict message ordering, which means messages are flushed to disk sequentially instead of in parallel.&lt;/li&gt;&lt;br/&gt;&lt;li data-end=&quot;1185&quot; data-start=&quot;1116&quot;&gt;This reduces the benefits of batching and increases disk latency.&lt;/li&gt;&lt;br/&gt;&lt;/ul&gt;&lt;br/&gt;&lt;/li&gt;&lt;br/&gt;&lt;li data-end=&quot;1394&quot; data-start=&quot;1187&quot;&gt;&lt;br/&gt;&lt;p data-end=&quot;1237&quot; data-start=&quot;1190&quot;&gt;&lt;strong data-end=&quot;1235&quot; data-start=&quot;1190&quot;&gt;Insufficient Buffering or Memory Pressure&lt;/strong&gt;&lt;/p&gt;&lt;br/&gt;&lt;ul data-end=&quot;1394&quot; data-start=&quot;1241&quot;&gt;&lt;br/&gt;&lt;li data-end=&quot;1394&quot; data-start=&quot;1241&quot;&gt;If the queue doesn&#39;t have enough memory to store incoming messages before writing to disk, it will continuously offload data to disk, increasing I/O.&lt;/li&gt;&lt;br/&gt;&lt;/ul&gt;&lt;br/&gt;&lt;/li&gt;&lt;br/&gt;&lt;li data-end=&quot;1537&quot; data-start=&quot;1396&quot;&gt;&lt;br/&gt;&lt;p data-end=&quot;1423&quot; data-start=&quot;1399&quot;&gt;&lt;strong data-end=&quot;1421&quot; data-start=&quot;1399&quot;&gt;Disk Fragmentation&lt;/strong&gt;&lt;/p&gt;&lt;br/&gt;&lt;ul data-end=&quot;1537&quot; data-start=&quot;1427&quot;&gt;&lt;br/&gt;&lt;li data-end=&quot;1537&quot; data-start=&quot;1427&quot;&gt;Over time, the message log files may become fragmented, increasing seek time and reducing disk throughput.&lt;/li&gt;&lt;br/&gt;&lt;/ul&gt;&lt;br/&gt;&lt;/li&gt;&lt;br/&gt;&lt;li data-end=&quot;1726&quot; data-start=&quot;1539&quot;&gt;&lt;br/&gt;&lt;p data-end=&quot;1572&quot; data-start=&quot;1542&quot;&gt;&lt;strong data-end=&quot;1570&quot; data-start=&quot;1542&quot;&gt;Message Retention Policy&lt;/strong&gt;&lt;/p&gt;&lt;br/&gt;&lt;ul data-end=&quot;1726&quot; data-start=&quot;1576&quot;&gt;&lt;br/&gt;&lt;li data-end=&quot;1726&quot; data-start=&quot;1576&quot;&gt;Retaining messages for longer periods increases the size of the disk data files, which increases the cost of index searches and message retrieval.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;" style="whiteSpace=wrap;html=1;rounded=1;" vertex="1" parent="1">
          <mxGeometry x="116.25" y="1230" width="1113.75" height="1540" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
  <diagram id="eaG7tnYQqPzvr3pBaduF" name="quorum Queue">
    <mxGraphModel dx="1050" dy="583" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="850" pageHeight="1100" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="uTVjADWYcI4EQm4Kb5Tj-1" value="" style="rounded=1;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="30" y="60" width="650" height="290" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
  <diagram id="yHwrHGjqEEXPeU_tm2wT" name="exchange">
    <mxGraphModel dx="1593" dy="506" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="850" pageHeight="1100" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="BtwRDpeeJGedjRrlBWg4-17" value="" style="rounded=1;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="-70" y="1500" width="860" height="250" as="geometry" />
        </mxCell>
        <mxCell id="BtwRDpeeJGedjRrlBWg4-3" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="1" source="BtwRDpeeJGedjRrlBWg4-1" target="BtwRDpeeJGedjRrlBWg4-2">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="BtwRDpeeJGedjRrlBWg4-5" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="1" source="BtwRDpeeJGedjRrlBWg4-1" target="BtwRDpeeJGedjRrlBWg4-4">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="BtwRDpeeJGedjRrlBWg4-7" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="1" source="BtwRDpeeJGedjRrlBWg4-1" target="BtwRDpeeJGedjRrlBWg4-6">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="BtwRDpeeJGedjRrlBWg4-1" value="IN RabbitMQ, an exchange is a component that receives messages (string/ json) from producers and routes to one or more queues based on the rule defined by the exchange.&amp;nbsp;" style="rounded=1;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="130" y="40" width="390" height="60" as="geometry" />
        </mxCell>
        <mxCell id="BtwRDpeeJGedjRrlBWg4-2" value="1. direct&lt;div&gt;2. fanout&lt;/div&gt;&lt;div&gt;3. topic&lt;/div&gt;&lt;div&gt;4. headers&amp;nbsp;&lt;/div&gt;" style="whiteSpace=wrap;html=1;rounded=1;" vertex="1" parent="1">
          <mxGeometry x="265" y="180" width="120" height="60" as="geometry" />
        </mxCell>
        <mxCell id="BtwRDpeeJGedjRrlBWg4-4" value="exchange provides an abstract layer to define the rules for routing." style="whiteSpace=wrap;html=1;rounded=1;" vertex="1" parent="1">
          <mxGeometry x="735" y="40" width="120" height="60" as="geometry" />
        </mxCell>
        <mxCell id="BtwRDpeeJGedjRrlBWg4-6" value="Key reasons to uses an exchange in RabbitMQ&lt;div&gt;1. Decoupling of producer and consumer&lt;/div&gt;&lt;div&gt;2. flexible routing of Messages&lt;/div&gt;&lt;div&gt;direct routing (exact match)&lt;/div&gt;&lt;div&gt;pattern based routing(topic)&lt;/div&gt;&lt;div&gt;broadcasting (fanout)&lt;/div&gt;&lt;div&gt;key-value based routing (headers)&lt;/div&gt;&lt;div&gt;3. multiple consumers for the same message&lt;/div&gt;&lt;div&gt;a single message can be consumed by multiple queues.&amp;nbsp;&amp;nbsp;&lt;/div&gt;&lt;div&gt;Fanout(broadcasting)&lt;/div&gt;&lt;div&gt;topic(pattern matching)&lt;/div&gt;&lt;div&gt;headers(metadata based==&amp;gt; key-value)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;4. Separation of Concerns&amp;nbsp;&lt;/div&gt;&lt;div&gt;producers and consumers are loosely coupled&lt;/div&gt;&lt;div&gt;producers are only responsible for sending the messages.&lt;/div&gt;&lt;div&gt;consumers are only responsible for processing the messages.&lt;/div&gt;&lt;div&gt;ex. : payment service ==&amp;gt; can send payment confirmation to an exchange.&lt;/div&gt;&lt;div&gt;The exchange can route it to multiple services :&amp;nbsp;&lt;/div&gt;&lt;div&gt;notification, order , anaclitic service.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;5. Scalability and high availability&lt;/div&gt;&lt;div&gt;exchange based architecture makes it easy to scale :&amp;nbsp;&lt;/div&gt;&lt;div&gt;add more queues or consumers without modifying the producers.&lt;/div&gt;&lt;div&gt;exchange handles the routing logic dynamically&lt;/div&gt;&lt;div&gt;6. Fault Tolerance : DLX dead letter exchange for handling failed messages..&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;" style="whiteSpace=wrap;html=1;rounded=1;" vertex="1" parent="1">
          <mxGeometry x="-160" y="130" width="320" height="470" as="geometry" />
        </mxCell>
        <mxCell id="BtwRDpeeJGedjRrlBWg4-8" value="&lt;h2 data-end=&quot;314&quot; data-start=&quot;270&quot;&gt;&lt;strong data-end=&quot;314&quot; data-start=&quot;275&quot;&gt;Increase the Number of Consumers&lt;/strong&gt;&lt;/h2&gt;&lt;br/&gt;&lt;ul data-end=&quot;508&quot; data-start=&quot;315&quot;&gt;&lt;br/&gt;&lt;li data-end=&quot;384&quot; data-start=&quot;315&quot;&gt;Most messaging systems support &lt;strong data-end=&quot;370&quot; data-start=&quot;348&quot;&gt;horizontal scaling&lt;/strong&gt; of consumers.&lt;/li&gt;&lt;br/&gt;&lt;li data-end=&quot;508&quot; data-start=&quot;385&quot;&gt;You can simply increase the number of consumer instances to handle higher throughput without modifying the producer code.&lt;/li&gt;&lt;br/&gt;&lt;/ul&gt;&lt;br/&gt;&lt;h3 data-end=&quot;541&quot; data-start=&quot;510&quot;&gt;������ Example in &lt;strong data-end=&quot;540&quot; data-start=&quot;528&quot;&gt;RabbitMQ&lt;/strong&gt;:&lt;/h3&gt;&lt;br/&gt;&lt;ul data-end=&quot;674&quot; data-start=&quot;542&quot;&gt;&lt;br/&gt;&lt;li data-end=&quot;614&quot; data-start=&quot;542&quot;&gt;Create additional consumer instances that subscribe to the same queue.&lt;/li&gt;&lt;br/&gt;&lt;li data-end=&quot;674&quot; data-start=&quot;615&quot;&gt;RabbitMQ will handle the load balancing across consumers.&lt;/li&gt;&lt;br/&gt;&lt;/ul&gt;&lt;br/&gt;&lt;p data-end=&quot;686&quot; data-start=&quot;676&quot;&gt;&lt;strong data-end=&quot;686&quot; data-start=&quot;676&quot;&gt;Steps:&lt;/strong&gt;&lt;/p&gt;&lt;br/&gt;&lt;ol data-end=&quot;866&quot; data-start=&quot;687&quot;&gt;&lt;br/&gt;&lt;li data-end=&quot;726&quot; data-start=&quot;687&quot;&gt;Start new instances of the consumer.&lt;/li&gt;&lt;br/&gt;&lt;li data-end=&quot;758&quot; data-start=&quot;727&quot;&gt;Bind them to the same queue.&lt;/li&gt;&lt;br/&gt;&lt;li data-end=&quot;866&quot; data-start=&quot;759&quot;&gt;RabbitMQ will distribute the messages across all consumers using &lt;strong data-end=&quot;842&quot; data-start=&quot;827&quot;&gt;round-robin&lt;/strong&gt; or &lt;strong data-end=&quot;856&quot; data-start=&quot;846&quot;&gt;fanout&lt;/strong&gt; strategy.&lt;/li&gt;&lt;/ol&gt;" style="rounded=1;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="270" y="270" width="550" height="650" as="geometry" />
        </mxCell>
        <mxCell id="BtwRDpeeJGedjRrlBWg4-9" value="&lt;h3 data-end=&quot;2572&quot; data-start=&quot;2509&quot;&gt;&lt;strong data-end=&quot;2572&quot; data-start=&quot;2516&quot;&gt;Different Routing Strategies for Different Use Cases&lt;/strong&gt;&lt;/h3&gt;&lt;br/&gt;&lt;ul data-end=&quot;2846&quot; data-start=&quot;2573&quot;&gt;&lt;br/&gt;&lt;li data-end=&quot;2846&quot; data-start=&quot;2573&quot;&gt;Each exchange type allows for different routing mechanisms:&lt;br/&gt;&lt;ul data-end=&quot;2846&quot; data-start=&quot;2637&quot;&gt;&lt;br/&gt;&lt;li data-end=&quot;2694&quot; data-start=&quot;2637&quot;&gt;&lt;strong data-end=&quot;2658&quot; data-start=&quot;2639&quot;&gt;Direct exchange&lt;/strong&gt; → Exact match for message delivery.&lt;/li&gt;&lt;br/&gt;&lt;li data-end=&quot;2745&quot; data-start=&quot;2697&quot;&gt;&lt;strong data-end=&quot;2718&quot; data-start=&quot;2699&quot;&gt;Fanout exchange&lt;/strong&gt; → Broadcast to all queues.&lt;/li&gt;&lt;br/&gt;&lt;li data-end=&quot;2794&quot; data-start=&quot;2748&quot;&gt;&lt;strong data-end=&quot;2768&quot; data-start=&quot;2750&quot;&gt;Topic exchange&lt;/strong&gt; → Pattern-based delivery.&lt;/li&gt;&lt;br/&gt;&lt;li data-end=&quot;2846&quot; data-start=&quot;2797&quot;&gt;&lt;strong data-end=&quot;2819&quot; data-start=&quot;2799&quot;&gt;Headers exchange&lt;/strong&gt; → Metadata-based delivery.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;" style="rounded=1;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="80" y="1090" width="580" height="260" as="geometry" />
        </mxCell>
        <mxCell id="BtwRDpeeJGedjRrlBWg4-12" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="1" source="BtwRDpeeJGedjRrlBWg4-10" target="BtwRDpeeJGedjRrlBWg4-11">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="BtwRDpeeJGedjRrlBWg4-10" value="Define Exchange" style="rounded=1;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="20" y="1580" width="120" height="60" as="geometry" />
        </mxCell>
        <mxCell id="BtwRDpeeJGedjRrlBWg4-14" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="1" source="BtwRDpeeJGedjRrlBWg4-11" target="BtwRDpeeJGedjRrlBWg4-13">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="BtwRDpeeJGedjRrlBWg4-11" value="Choosing the right choice as per our req" style="whiteSpace=wrap;html=1;rounded=1;" vertex="1" parent="1">
          <mxGeometry x="220" y="1580" width="120" height="60" as="geometry" />
        </mxCell>
        <mxCell id="BtwRDpeeJGedjRrlBWg4-16" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="1" source="BtwRDpeeJGedjRrlBWg4-13" target="BtwRDpeeJGedjRrlBWg4-15">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="BtwRDpeeJGedjRrlBWg4-13" value="producers" style="whiteSpace=wrap;html=1;rounded=1;" vertex="1" parent="1">
          <mxGeometry x="420" y="1580" width="120" height="60" as="geometry" />
        </mxCell>
        <mxCell id="BtwRDpeeJGedjRrlBWg4-15" value="consumers" style="whiteSpace=wrap;html=1;rounded=1;" vertex="1" parent="1">
          <mxGeometry x="620" y="1580" width="120" height="60" as="geometry" />
        </mxCell>
        <mxCell id="BtwRDpeeJGedjRrlBWg4-20" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="1" source="BtwRDpeeJGedjRrlBWg4-18" target="BtwRDpeeJGedjRrlBWg4-19">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="BtwRDpeeJGedjRrlBWg4-18" value="workflow for exchange" style="text;html=1;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;fillColor=#fff2cc;strokeColor=#d6b656;" vertex="1" parent="1">
          <mxGeometry x="-10" y="1700" width="110" height="30" as="geometry" />
        </mxCell>
        <mxCell id="BtwRDpeeJGedjRrlBWg4-19" value="Practical impl(coding aspect)" style="whiteSpace=wrap;html=1;fillColor=#fff2cc;strokeColor=#d6b656;gradientColor=none;rounded=0;" vertex="1" parent="1">
          <mxGeometry x="175" y="1685" width="120" height="60" as="geometry" />
        </mxCell>
        <mxCell id="BtwRDpeeJGedjRrlBWg4-23" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="1" source="BtwRDpeeJGedjRrlBWg4-21" target="BtwRDpeeJGedjRrlBWg4-22">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="BtwRDpeeJGedjRrlBWg4-24" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="1" source="BtwRDpeeJGedjRrlBWg4-21" target="BtwRDpeeJGedjRrlBWg4-22">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="BtwRDpeeJGedjRrlBWg4-26" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="1" source="BtwRDpeeJGedjRrlBWg4-21" target="BtwRDpeeJGedjRrlBWg4-25">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="BtwRDpeeJGedjRrlBWg4-21" value="Exchange(direct)" style="rounded=1;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="270" y="1820" width="120" height="60" as="geometry" />
        </mxCell>
        <mxCell id="BtwRDpeeJGedjRrlBWg4-22" value="q1" style="whiteSpace=wrap;html=1;rounded=1;" vertex="1" parent="1">
          <mxGeometry x="385" y="1970" width="120" height="60" as="geometry" />
        </mxCell>
        <mxCell id="BtwRDpeeJGedjRrlBWg4-25" value="q2" style="whiteSpace=wrap;html=1;rounded=1;" vertex="1" parent="1">
          <mxGeometry x="190" y="1970" width="120" height="60" as="geometry" />
        </mxCell>
        <mxCell id="BtwRDpeeJGedjRrlBWg4-29" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;entryX=0;entryY=0.5;entryDx=0;entryDy=0;" edge="1" parent="1" source="BtwRDpeeJGedjRrlBWg4-27" target="BtwRDpeeJGedjRrlBWg4-21">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="BtwRDpeeJGedjRrlBWg4-27" value="publisher" style="whiteSpace=wrap;html=1;rounded=1;" vertex="1" parent="1">
          <mxGeometry x="-50" y="1830" width="120" height="60" as="geometry" />
        </mxCell>
        <mxCell id="BtwRDpeeJGedjRrlBWg4-30" value="it can have multiple queues mapped with routing key" style="text;html=1;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;fillColor=#dae8fc;strokeColor=#6c8ebf;" vertex="1" parent="1">
          <mxGeometry x="350" y="1890" width="200" height="30" as="geometry" />
        </mxCell>
        <mxCell id="BtwRDpeeJGedjRrlBWg4-31" value="Fanout : the publisher sends a message to the fanout exchange.&lt;div&gt;the fanout exchange delivers the message to all bound queues.&lt;/div&gt;&lt;div&gt;each consumer receives a copy of the message.&lt;/div&gt;&lt;div&gt;&lt;b&gt;&amp;nbsp;** routing key will be ignored in case of fanout exchange&lt;/b&gt;.&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="80" y="2210" width="380" height="240" as="geometry" />
        </mxCell>
        <mxCell id="BtwRDpeeJGedjRrlBWg4-34" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="1" source="BtwRDpeeJGedjRrlBWg4-32" target="BtwRDpeeJGedjRrlBWg4-33">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="BtwRDpeeJGedjRrlBWg4-32" value="Topic : it allows messages to be routed based on matching patterns defined by the routing key.&lt;div&gt;work:&amp;nbsp;&lt;/div&gt;&lt;div&gt;1. producers send messages to the topic exchange with a routing key.&lt;/div&gt;&lt;div&gt;2. consumers bind a queue to the exchange with a binding key.&lt;/div&gt;&lt;div&gt;3. Rabbitmq routes the messages to the queue where the routing key matches the binding key.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="-20" y="2520" width="480" height="170" as="geometry" />
        </mxCell>
        <mxCell id="BtwRDpeeJGedjRrlBWg4-33" value="app.error&lt;div&gt;db.info&lt;/div&gt;&lt;div&gt;web.warn&lt;/div&gt;" style="whiteSpace=wrap;html=1;rounded=1;" vertex="1" parent="1">
          <mxGeometry x="160" y="2825" width="120" height="60" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
